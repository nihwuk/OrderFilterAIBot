import os
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from selenium import webdriver
import time
import httpx
from selenium.webdriver.firefox.service import Service
from selenium.webdriver.firefox.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.by import By
import pickle
import logging
from mistralai.client import MistralClient 
from mistralai import Mistral



TOKEN = "Token_Bot"
API_KEY = "Api_Key_Mistral"
model = "mistral-large-latest"

client = Mistral(api_key=API_KEY)

bot = Bot(token=TOKEN)
dp = Dispatcher()

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

monitoring_task = None
last_seen_links = set()  
MAX_RETRIES = 5
INITIAL_DELAY = 1
BACKOFF_FACTOR = 2
TIMEOUT = 10.0

RETRY_STATUSES = {429, 500, 502, 503, 504}

def parse_kwork_page(page_num: int):
    options = Options()
    options.binary_location = r"C:\Program Files\Mozilla Firefox\firefox.exe"
    # options.add_argument('--headless')

    service = Service()
    driver = webdriver.Firefox(service=service, options=options)

    driver.get("https://kwork.ru")
    with open("kwork_cookies.pkl", "rb") as f:
        cookies = pickle.load(f)
        for cookie in cookies:
            driver.add_cookie(cookie)

    url = f"https://kwork.ru/projects?favorites={page_num}"
    driver.get(url)
    driver.implicitly_wait(5)

    cards = driver.find_elements(By.CSS_SELECTOR, "div.want-card")
    cards = list(reversed(cards)) 
    page_orders = []

    for card in cards:
        try:
            title_elem = card.find_element(By.CSS_SELECTOR, ".wants-card__header-title a")
            title = title_elem.text.strip()
            link = title_elem.get_attribute("href")

            budget_elem = card.find_element(By.CSS_SELECTOR, ".wants-card__price div.d-inline")
            budget = budget_elem.text.strip()

            try:
                more_btn = card.find_element(By.CLASS_NAME, "show-more")
                bot.logger.info("Нажимаем кнопку 'Показать полностью!'")
                driver.execute_script("arguments[0].click();", more_btn)
                time.sleep(0.2) 
            except:
                pass

            try:
                desc_el = card.find_element(By.CSS_SELECTOR, ".wants-card__description-text")
                description = desc_el.text.strip()
            except Exception as e:
                logging.error(f"Ошибка при получении описания: {e}")
                description = "—"


            buyer_elem = card.find_element(By.CSS_SELECTOR, ".want-payer-statistic a")
            buyer = buyer_elem.text.strip()

            time_left_elem = card.find_element(By.CSS_SELECTOR, ".want-card__informers-row span.mr8")
            time_left = time_left_elem.text.strip()

            offers_elem = card.find_elements(By.CSS_SELECTOR, ".want-card__informers-row span.mr8")[1]
            offers = offers_elem.text.strip()

            page_orders.append({
                "title": title,
                "link": link,
                "budget": budget,
                "description": description,
                "buyer": buyer,
                "time_left": time_left,
                "offers": offers,
            })
        except Exception as e:
            logger.error(f"Ошибка при парсинге карточки: {e}")

    driver.quit()
    return page_orders

def format_orders_as_text(orders):
    result = "Подходящие заказы:\n\n"
    for i, order in enumerate(orders, start=1):
        result += (
            f"Заголовок. {order['title']}\n"
            f"Ссылка: {order['link']}\n" 
            f"Бюджет: {order['budget']}\n"
            f"Описание: {order['description']}\n"
            f"Покупатель: {order['buyer']}\n"
            f"Осталось: {order['time_left']}\n"
            f"Предложений: {order['offers']}\n\n"
            f"{'-'*40}"
        )
    result += "Все эти заказы соответствуют вашим навыкам в создании сайтов, лендингов, верстке и Python.\n"
    return result
    # result = []
    # for order in orders:
    #     result.append(
            # f"Заголовок: {order['title']}\n"
            # f"Ссылка: {order['link']}\n"
            # f"Бюджет: {order['budget']}\n"
            # f"Описание: {order['description']}\n"
            # f"Покупатель: {order['buyer']}\n"
            # f"Осталось: {order['time_left']}\n"
            # f"{order['offers']}\n"
            # f"{'-'*40}"
        # )
    # return "\n".join(result)

async def retry_mistral_chat_complete(client, model, messages, max_retries=5, initial_delay=1):
    delay = initial_delay
    for attempt in range(1, max_retries + 1):
        try:
            response = client.chat.complete(model=model, messages=messages)
            return response
        except Exception as e:
            err_msg = str(e).lower()
            if "429" in err_msg or "too many requests" in err_msg or "timeout" in err_msg:
                logger.warning(f"Попытка {attempt}/{max_retries} — ошибка {e}, ждем {delay} секунд и повторяем")
                await asyncio.sleep(delay)
                delay *= 2
            else:
                logger.error(f"Ошибка не связана с лимитами или таймаутом: {e}")
                raise
    raise Exception(f"Превышено количество попыток ({max_retries}) при вызове Mistral API")

async def send_orders(chat_id: int, orders):
    text_orders = format_orders_as_text(orders)
    chat_response = await retry_mistral_chat_complete(
    client,     
    model,
    messages = [
            {
                "role": "system",
                "content": (
                    "Ты помощник фрилансера. Получишь список заказов с Kwork. "
                    "Проанализируй каждый заказ. Оставь ТОЛЬКО ТЕ, которые подходят под возможности пользователя. "
                    "Если ни один заказ не подходит — ОТВЕТЬ ЧЁТКО: 'НЕТ ПОДХОДЯЩИХ ЗАКАЗОВ'. "
                    "У пользователя такие навыки: простые одностраничные сайты, лендинги, html-верстка, телеграм-боты, скрипты и парсеры на Python."
                ),
            },
            {"role": "user", "content": text_orders},
        ]
    )
    reply_text = chat_response.choices[0].message.content.strip().lower()

    if "нет подходящих заказов" not in reply_text:
        await bot.send_message(chat_id, chat_response.choices[0].message.content)
    else:
        logging.info("Новых подходящих заказов не найдено.")
    # await bot.send_message(chat_id, chat_response.choices[0].message.content)
    # for order in orders:  
    #     text = (
    #         f"Заголовок: {order['title']}\n"
    #         f"Ссылка: {order['link']}\n"
    #         f"Бюджет: {order['budget']}\n"
    #         f"Описание: {order['description'][:100]}...\n"
    #         f"Покупатель: {order['buyer']}\n"
    #         f"Осталось: {order['time_left']}\n"
    #         f"{order['offers']}\n" 
    #         "------------------------"
    #     )

async def monitor_orders(chat_id: int):
    global last_seen_links
    try:
        while True:
            new_orders = []
            for page in range(1, 2):  
                loop = asyncio.get_running_loop()
                orders = await loop.run_in_executor(None, parse_kwork_page, page)
                for order in orders:
                    if order["link"] not in last_seen_links:
                        new_orders.append(order)
                        last_seen_links.add(order["link"])
            if new_orders:
                logger.info(f"Найдено новых заказов: {len(new_orders)}")
                await send_orders(chat_id, new_orders)
            await asyncio.sleep(60)  
    except asyncio.CancelledError:
        logger.info("Мониторинг заказов остановлен корректно")
        raise


@dp.message(Command("start_monitor"))
async def start_monitor_handler(message: types.Message):
    global monitoring_task, last_seen_links

    if monitoring_task and not monitoring_task.done():
        await message.answer("Мониторинг уже запущен.")
        return

    await message.answer("Запускаю мониторинг заказов и отправляю текущие данные...")

    last_seen_links = set()

    all_orders = []
    for page in range(1, 2):
        loop = asyncio.get_running_loop()
        orders = await loop.run_in_executor(None, parse_kwork_page, page)
        all_orders.extend(orders)
        for order in orders:
            last_seen_links.add(order["link"])

    await send_orders(message.chat.id, all_orders)
    monitoring_task = asyncio.create_task(monitor_orders(message.chat.id))

@dp.message(Command("stop_monitor"))
async def stop_monitor_handler(message: types.Message):
    global monitoring_task
    if monitoring_task:
        monitoring_task.cancel()
        monitoring_task = None
        await message.answer("Мониторинг остановлен.")
    else:
        await message.answer("Мониторинг не был запущен.")

@dp.message(Command("start"))
async def start_command(message: types.Message):
    await message.answer("Привет! Используй /start_monitor для запуска мониторинга заказов и /stop_monitor для остановки.")

async def main():
    await dp.start_polling(bot) 

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
